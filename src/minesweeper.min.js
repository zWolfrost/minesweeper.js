export default class a{constructor(e,f,g=e*f/5|0){let a=e*f;Object.assign(this,{rows:e,cols:f,cells:a,mines:g});for(let b=0;b<a;b++)this[b]={mines:0,isMine:b<g,isOpen:!1,isFlagged:!1};for(let c=0;c<a;c++){let h=Math.trunc(Math.random()*a);[this[c],this[h]]=[this[h],this[c]]}for(let d=0;d<a;d++)this[d].isMine&&this.getNearbyCells(d).forEach(a=>this[a].mines++);return this}simplify(){let c=[];for(let a=0;a<this.rows;a++){let d=[];for(let b=0;b<this.cols;b++){let e=this[a*this.cols+b];d.push(e.isMine?-1:e.mines)}c.push(d)}return c}openCell(a,e=this.isNew()){let f=[],g=a=>{this[a].isOpen=!0,f.push(a)},c=a=>{0==this[a].mines&&this.getEmptyZone(a).forEach(a=>g(a))};if(!1==this[a].isOpen){if(g(a),this[a].isMine){if(e){this[a].isMine=!1;for(let b=0;b<this.cells;b++)if(!1==this[b].isMine&&b!=a){this[b].isMine=!0;break}this.resetMines(),c(a)}}else c(a)}else if(0!=this[a].mines){let d=this.getNearbyCells(a);d.filter(a=>this[a].isFlagged).length==this[a].mines&&d.forEach(a=>{!1==this[a].isFlagged&& !1==this[a].isOpen&&(g(a),!1==this[a].isMine&&c(a))})}return f}isSolvableFrom(F,G=!0){let A=this.openCell(F);if(1==A.length)return this[A[0]].isOpen,!1;let b=!0;for(;b;){let a=[];b=!1;let m=[];for(let n=0;n<this.cells;n++)!1==this[n].isOpen&& !1==this[n].isFlagged&&m.push(...this.getNearbyCells(n).filter(a=>this[a].isOpen));for(let d of m=[...new Set(m)])if(0==this[d].mines){let B=this.getEmptyZone(d).filter(a=>!1==this[a].isOpen);B.length>0&&(B.forEach(a=>this[a].isOpen=!0),b=!0)}else{let c=this.getNearbyCells(d),s=0,C=0;for(let t=0;t<c.length;t++)this[c[t]].isFlagged&&s++,!1==this[c[t]].isOpen&&C++;if((c=c.filter(a=>!1==this[a].isOpen&& !1==this[a].isFlagged)).length>0&&(this[d].mines==s&&(c.forEach(a=>this[a].isOpen=!0),b=!0),this[d].mines==C&&(c.forEach(a=>this[a].isFlagged=!0),b=!0),this[d].mines>s)){let D=[this[d].mines-s];c.forEach(a=>D.push(a)),!1==JSON.stringify(a).includes(JSON.stringify(D))&&a.push(D)}}if(!1==b)for(let w of m){let f=this.getNearbyCells(w);for(let g=0;g<a.length;g++)if(f.some(b=>a[g].includes(b,1))){let H=a[g].slice(1).filter(a=>!1==f.includes(a)).length,x=0,o=[];for(let h=0;h<f.length;h++)this[f[h]].isFlagged?x++:!1==this[f[h]].isOpen&& !1==a[g].includes(f[h],1)&&o.push(f[h]);o.length>0&&(this[w].mines==x+a[g][0]+o.length&&(o.forEach(a=>this[a].isFlagged=!0),b=!0),this[w].mines==x+a[g][0]-H&& !1==b&&o.forEach(a=>{!1==this[a].isFlagged&&(this[a].isOpen=!0,b=!0)}))}}if(!1==b)for(let y of m){let i=this.getNearbyCells(y),j=[0];for(let e=0;e<a.length;e++){let I=i.filter(a=>!1==this[a].isOpen&& !1==this[a].isFlagged);a[e].slice(1).every(a=>I.includes(a))&& !1==a[e].slice(1).some(a=>j.includes(a,1))&&I.sort().toString()!=a[e].slice(1).sort().toString()&&(j[0]+=a[e][0],j.push(...a[e].slice(1)))}if(j[0]>0){let z=0,p=[];for(let k=0;k<i.length;k++)this[i[k]].isFlagged?z++:!1==this[i[k]].isOpen&& !1==j.includes(i[k],1)&&p.push(i[k]);p.length>0&&(this[y].mines==z+j[0]+p.length&&(p.forEach(a=>this[a].isFlagged=!0),b=!0),this[y].mines==z+j[0]&& !1==b&&p.forEach(a=>{!1==this[a].isFlagged&&(this[a].isOpen=!0,b=!0)}))}}if(!1==b){if(this.usedFlags==this.mines)for(let q=0;q<this.cells;q++)!1==this[q].isOpen&& !1==this[q].isFlagged&&(this[q].isOpen=!0);else{a.sort((a,b)=>a.length-b.length);let u=[0];for(let r=0;r<a.length;r++)!1==a[r].slice(1).some(a=>JSON.stringify(u.slice(1)).includes(a))&&(u[0]+=a[r][0],u.push(...a[r].slice(1)));if(u[0]==this.mines-this.usedFlags)for(let l=0;l<this.cells;l++)!1==this[l].isOpen&& !1==this[l].isFlagged&& !1==u.includes(l,1)&&(this[l].isOpen=!0,b=!0)}}}let E=!1;if(this.isCleared()&&(E=!0),G)for(let v=0;v<this.cells;v++)this[v].isOpen=!1,this[v].isFlagged=!1;return E}getHint(G=!1,H=!0){let c=[],d=[],a=[];for(let b=0;b<this.cells;b++)if(this[b].isOpen){if(0==this[b].mines){let C=this.getNearbyCells(b),D=C.filter(a=>!1==this[a].isOpen);D.length>0&&(c.push(["O",...C,b]),d.push(["O",...D]))}else{let o=this.getNearbyCells(b),t=0,E=0;for(let u=0;u<o.length;u++)this[o[u]].isFlagged&&t++,!1==this[o[u]].isOpen&&E++;let v=o.filter(a=>!1==this[a].isOpen&& !1==this[a].isFlagged);if(v.length>0&&(this[b].mines==t&&(c.push(["O",...o,b]),d.push(["O",...v])),this[b].mines==E&&(c.push(["F",...o,b]),d.push(["F",...v])),this[b].mines>t)){let F=[this[b].mines-t];v.forEach(a=>F.push(a)),!1==JSON.stringify(a).includes(JSON.stringify(F))&&a.push(F)}}}for(let f=0;f<this.cells;f++)if(this[f].isOpen&&0!=this[f].mines){let e=this.getNearbyCells(f);for(let k=0;k<a.length;k++)if(e.some(b=>a[k].includes(b,1))){let I=a[k].slice(1).filter(a=>!1==e.includes(a)).length,x=0,l=[],y=[];for(let h=0;h<e.length;h++){let J=this.getNearbyCells(e[h]);a[k].slice(1).every(a=>J.includes(a))&&this[e[h]].isOpen&&y.push(...J),this[e[h]].isFlagged?x++:!1==this[e[h]].isOpen&& !1==a[k].includes(e[h],1)&&l.push(e[h])}l.length>0&&(this[f].mines==x+a[k][0]+l.length?(c.push(["F",...new Set([...e,...y,f])]),d.push(["F",...l])):this[f].mines==x+a[k][0]-I&&(l=l.filter(a=>!1==this[a].isFlagged)).length>0&&(c.push(["O",...new Set([...e,...y,f])]),d.push(["O",...l])))}}for(let g=0;g<this.cells;g++)if(this[g].isOpen&&0!=this[g].mines){let i=this.getNearbyCells(g),j=[0];for(let m=0;m<a.length;m++){let K=i.filter(a=>!1==this[a].isOpen&& !1==this[a].isFlagged);a[m].slice(1).every(a=>K.includes(a))&& !1==a[m].slice(1).some(a=>j.includes(a,1))&&K.sort().toString()!=a[m].slice(1).sort().toString()&&(j[0]+=a[m][0],j.push(...a[m].slice(1)))}if(j[0]>0){let z=0,n=[];for(let p=0;p<i.length;p++)this[i[p]].isFlagged?z++:!1==this[i[p]].isOpen&& !1==j.includes(i[p],1)&&n.push(i[p]);n.length>0&&(this[g].mines==z+j[0]+n.length?(c.push(["F",...new Set([...i,...j.slice(1),g])]),d.push(["F",...n])):this[g].mines==z+j[0]&&(n=n.filter(a=>!1==this[a].isFlagged)).length>0&&(c.push(["O",...new Set([...i,...j.slice(1),g])]),d.push(["O",...n])))}}if(this.usedFlags==this.mines){let A=[];for(let r=0;r<this.cells;r++)!1==this[r].isOpen&& !1==this[r].isFlagged&&A.push(r);c.push(["O",...A]),d.push(["O",...A])}else{a.sort((a,b)=>a.length-b.length);let w=[0];for(let s=0;s<a.length;s++)!1==a[s].slice(1).some(a=>JSON.stringify(w.slice(1)).includes(a))&&(w[0]+=a[s][0],w.push(...a[s].slice(1)));if(w[0]==this.mines-this.usedFlags){let B=[];for(let q=0;q<this.cells;q++)!1==this[q].isOpen&& !1==this[q].isFlagged&& !1==w.includes(q,1)&&B.push(q);c.push(["O",...B]),d.push(["O",...B])}}return H&&(c=c[0],d=d[0]),G?d:c}resetMines(){for(let b=0;b<this.cells;b++)this[b].mines=0;for(let a=0;a<this.cells;a++)this[a].isMine&&this.getNearbyCells(a).forEach(a=>this[a].mines++)}getCellArray(){return Object.values(this).slice(0,this.cells)}getNearbyCells(b,d=!1){let a=[b-this.cols-1,b-this.cols,b-this.cols+1,b-1,b+1,b+this.cols-1,b+this.cols,b+this.cols+1],c=[];return d&&c.push(b),a[1]>=0&&c.push(a[1]),a[6]<this.cells&&c.push(a[6]),0!=this.getCellCol(b)&&(c.push(a[3]),a[0]>=0&&c.push(a[0]),a[5]<this.cells&&c.push(a[5])),0!=this.getCellCol(b+1)&&(c.push(a[4]),a[2]>=0&&c.push(a[2]),a[7]<this.cells&&c.push(a[7])),c}getEmptyZone(f,g=!1){let a=[f];for(let d=0;d<a.length;d++)if(0==this[a[d]].mines){let b=this.getNearbyCells(a[d]);if(g)for(let e=0;e<b.length;e++)!1==a.includes(b[e])&&a.push(b[e]);else for(let c=0;c<b.length;c++)!1==a.includes(b[c])&& !1==this[b[c]].isFlagged&&a.push(b[c])}return a}getCellRow(a){return a/this.cols|0}getCellCol(a){return a%this.cols}getCellIndex(a,b){return a*this.cols+b}isNew(){return!1==this.getCellArray().some(a=>a.isOpen)}isGoingOn(){let b=!1,c=!1;for(let a=0;a<this.cells;a++){if(this[a].isOpen&&this[a].isMine)return!1;this[a].isOpen&&(c=!0),!1==this[a].isOpen&& !1==this[a].isMine&&(b=!0)}return c&&b}isOver(){let b=!1;for(let a=0;a<this.cells;a++)if(!1==this[a].isOpen&& !1==this[a].isMine&&(b=!0),this[a].isOpen&&this[a].isMine)return!0;return!1==b}isCleared(){for(let a=0;a<this.cells;a++)if(!1==this[a].isOpen&& !1==this[a].isMine||this[a].isOpen&&this[a].isMine)return!1;return!0}isLost(){return this.getCellArray().some(a=>a.isOpen&&a.isMine)}visualDebug(d=!1){let c="";for(let a=0;a<this.cells;a++){let b="";!1==this[a].isOpen&& !1==d?this[a].isFlagged?b+="F":b+="?":!0==this[a].isMine?b+="X":b+=this[a].mines,0==this.getCellCol(a+1)?c+=b+"\n":c+=b+" "}console.log(c)}get usedFlags(){return this.getCellArray().filter(a=>a.isFlagged).length}}
