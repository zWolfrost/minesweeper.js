export default class t{constructor(t,i,e=Math.floor(t*i/5),s=Math.random){let h=t=>{let i=[t],e=t%this.width,s=Math.floor(t/this.width),h=s>0,l=s<this.height-1;return h&&i.push(t-this.width),l&&i.push(t+this.width),e>0&&(i.push(t-1),h&&i.push(t-this.width-1),l&&i.push(t+this.width-1)),e<this.width-1&&(i.push(t+1),h&&i.push(t-this.width+1),l&&i.push(t+this.width+1)),i},l=(t=validateNumber(t,0))*(i=validateNumber(i,0));if(Array.isArray(e)){Object.assign(this,{width:t,height:i,cells:l,mines:e.length});for(let r=0;r<l;r++)this[r]={mines:0,isMine:!1,isOpen:!1,isFlagged:!1};for(let n=0;n<e.length;n++){this[e[n]].isMine=!0;let o=h(e[n]);for(let d=0;d<o.length;d++)this[o[d]].mines++}}else{e=validateNumber(e,0,l),Object.assign(this,{width:t,height:i,cells:l,mines:e});for(let f=0;f<l;f++)this[f]={mines:0,isMine:f<e,isOpen:!1,isFlagged:!1};for(let a=l-1;a>0;a--){let u=Math.floor(s()*(a+1));[this[a],this[u]]=[this[u],this[a]]}for(let $=0;$<l;$++)if(this[$].isMine){let w=h($);for(let g=0;g<w.length;g++)this[w[g]].mines++}}return this}toMinefield2D(){if(this instanceof Minefield2D)throw Error("This object is already an instance of Minefield2D");let t=new Minefield2D(this.width,this.height);for(let i=0;i<this.width;i++)for(let e=0;e<this.height;e++)delete t[i][e],t[i][e]=this[i+e*this.width];return t}simplify(){let t=[];for(let i=0;i<this.cells;i++)t.push(this[i].isMine?-1:this[i].mines);return t}};class Minefield2D extends t{constructor(t,i,e=Math.floor(t*i/5),s=Math.random){super(t,i,e,s);let h=[];for(let l=0;l<t;l++){h.push([]);for(let r=0;r<i;r++)h[l][r]=this[l+r*t]}for(let n=0;n<this.cells;n++)delete this[n];return Object.assign(this,h),this}toMinefield(){let i=new t(this.width,this.height);for(let e=0;e<this.width;e++)for(let s=0;s<this.height;s++)delete i[e+s*this.width],i[e+s*this.width]=this[e][s];return i}simplify(){let t=[];for(let i=0;i<this.width;i++){t.push([]);for(let e=0;e<this.height;e++){let s=this[i][e];t[i].push(s.isMine?-1:s.mines)}}return t}}function validateNumber(t,i=-1/0,e=1/0){try{if(t=Math.trunc(i>=0?Math.abs(+t):+t),isNaN(t))throw 0}catch{throw Error("Invalid parameter type")}if(t<i)throw Error("Parameter value is too small");if(t>e)throw Error("Parameter value is too big");return t}